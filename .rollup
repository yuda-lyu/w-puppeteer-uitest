import commonjs from 'rollup-plugin-commonjs'
import resolve from 'rollup-plugin-node-resolve'
import postcss from 'rollup-plugin-postcss'
import babel from 'rollup-plugin-babel'
import minify from 'rollup-plugin-babel-minify'
import fs from 'fs'
import _ from 'lodash'


let pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'))


let optBabel = {
    runtimeHelpers: true,
    exclude: 'node_modules/**',
    include: 'node_modules/wsemi/**', //need compile
    presets: [
        [
            '@babel/preset-env',
            {
                useBuiltIns: 'entry', //entry usage, usage is not stable
                corejs: 3,
            }
        ]
    ],
}


let optPlugins = [
    //vue(),
    commonjs(),
    resolve({
        preferBuiltins: false,
        browser: true,
    }),
    babel(optBabel),
    postcss({
        extensions: ['.css']
    }),
    minify({ comments: false, }),
]


let cps = [
    'exp',
    //'expBuild',
    //'expTest',
    //'getB64',
    //'compareB64'
]


let rs = _.map(cps, function(v) {
    let name = _.kebabCase(v)
    let input = `src/${v}.mjs`
    let file = `dist/${name}.umd.js`
    let banner = `/*!\n * ${name} v${pkg.version}\n * (c) 2018-2019 ${pkg.author}\n * Released under the MIT License.\n */`
    return {
        input: input,
        output: {
            banner: banner,
            globals: { //指定內外模組的關聯性，左邊為內部使用之模組名稱，右邊為外部提供之模組名稱
                'fs': 'fs',
                'bluebird': 'bluebird',
                'jimp': 'jimp',
                'puppeteer': 'puppeteer',
            },
            format: 'umd',
            name: name,
            file: file,
            sourcemap: true
        },
        external: [ //指定哪些內部模組需引用外部模組
            'fs',
            'bluebird',
            'jimp',
            'puppeteer',
        ],
        plugins: optPlugins
    }
})


export default rs
